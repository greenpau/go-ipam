swagger: "2.0"

info:
  version: 1.0.0
  title: nic api
  description: A simple API to maintain network related information.

schemes:
  - http
host: localhost
basePath: /v1

consumes:
  - application/json
  - application/vnd.api+json
  - application/x-www-form-urlencoded

produces:
  - application/json
  - application/json; charset=utf-8
  - application/vnd.api+json

paths:
  /signup:
    post:
      summary: Owner signup endpoint
      description: Allow new Owners to signup
      security: []
      parameters:
        - name: signup
          in: body
          description: The Owner to create.
          schema:
            $ref: "#/definitions/SignupRestData"
      responses:
        200:
          description: Signup completed succesfully.
          schema:
            $ref: "#/definitions/SignupRestData"
        422:
          description: Failed to signup.
          schema:
            $ref: "#/definitions/SignupRestData"
        404:
          description: Signup not enabled.
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /activate:
    get:
      summary: Activate an Owner
      description: Activate a newly signed up Owner.
      security: []
      parameters:
        - $ref: "#/parameters/queryToken"
      responses:
        200:
          description: Owner activated succesfully.
          schema:
            $ref: "#/definitions/ActivationRestData"
        422:
          description: Activation failed.
          schema:
            $ref: "#/definitions/ActivationRestData"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /auth:
    post:
      summary: Authenticate and get session token.
      description: Authenticate a Owner and return a session token.
      security: []
      parameters:
        - name: owner
          in: body
          description: The Owner to authenticate.
          schema:
            $ref: "#/definitions/Owner"
      responses:
        200:
          description: Authenticated succesfully.
          schema:
            $ref: "#/definitions/SessionToken"
        400:
          description: Failed to authenticate.
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /owner:
    get:
      summary: Get information about all Owners.
      description: Returns a list of all Owners in the database.
      parameters:
        - $ref: "#/parameters/pageSize"
        - $ref: "#/parameters/pageNumber"
      responses:
        200:
          description: A list of Owner.
          schema:
            $ref: "#/definitions/Owners"
        404:
          $ref: "#/responses/NoOwnersFoundResponse"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
    post:
      summary: Creates a new Owner.
      description: Add a new Owner to the database.
      security:
        - AdminSecurity: []
      parameters:
        - name: owner
          in: body
          description: The Owner to create.
          schema:
            $ref: "#/definitions/Owner"
      responses:
        204:
          description: Owner created succesfully.
        400:
          description: Owner could not be created.
        500:
          $ref: "#/responses/Standard500ErrorResponse"
    put:
      summary: Updates existing owner.
      description: Updates an existing Owner in the database.
      parameters:
        - name: owner
          in: body
          description: The Owner to update.
          schema:
            $ref: "#/definitions/Owner"
      responses:
        204:
          description: Owner updated succesfully.
        400:
          description: Owner could not be updated.
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /owner/{username}:
    parameters:
      - $ref: "#/parameters/username"
    get:
      summary: Get information about an Owner.
      description: Returns a single Owner.
      responses:
        200:
          description: a Owner.
          schema:
            $ref: "#/definitions/Owner"
        404:
          $ref: "#/responses/OwnerDoesNotExistResponse"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
    delete:
      summary: Deletes an Owner.
      description: Delete a single Owner identified by its username.
      responses:
        204:
          description: Owner deleted succesfully.
        404:
          $ref: "#/responses/OwnerDoesNotExistResponse"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /asnum:
    get:
      summary: Get information about all Asnums.
      description: Returns a list of all Asnums in the database.
      parameters:
        - $ref: "#/parameters/pageSize"
        - $ref: "#/parameters/pageNumber"
      responses:
        200:
          description: A list of Asnum
          schema:
            $ref: "#/definitions/Asnums"
        404:
          $ref: "#/responses/NoAsnumsFoundResponse"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
    post:
      summary: Creates a new Asnum.
      description: Add a new Asnum to the database.
      parameters:
        - name: asnum
          in: body
          description: The Asnum to create.
          schema:
            $ref: "#/definitions/Asnum"
      responses:
        204:
          description: Asnum created succesfully.
        400:
          description: Asnum could not be created.
        500:
          $ref: "#/responses/Standard500ErrorResponse"
    put:
      summary: Updates existing Asnum.
      description: Updates an existing Asnum in the database.
      parameters:
        - name: asnum
          in: body
          description: The Asnum to update.
          schema:
            $ref: "#/definitions/Asnum"
      responses:
        204:
          description: Asnum updated succesfully.
        400:
          description: Asnum could not be updated.
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /asnum/{asnum}:
    parameters:
      - $ref: "#/parameters/asnum"
    get:
      summary: Get information about an Asnum
      description: Returns a single Asnum
      responses:
        200:
          description: an Asnum
          schema:
            $ref: "#/definitions/Asnum"
        404:
          $ref: "#/responses/AsnumDoesNotExistResponse"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
    delete:
      summary: Deletes an Asnum
      description: Delete a single Asnum identified by its asnum
      responses:
        204:
          description: Asnum deleted succesfully
        404:
          $ref: "#/responses/AsnumDoesNotExistResponse"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /prefix:
    get:
      summary: Get information about all Prefixes.
      description: Returns a list of all Prefixes in the database.
      parameters:
        - $ref: "#/parameters/pageSize"
        - $ref: "#/parameters/pageNumber"
      responses:
        200:
          description: A list of Prefix
          schema:
            $ref: "#/definitions/Prefixes"
        404:
          $ref: "#/responses/NoPrefixesFoundResponse"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
    post:
      summary: Creates a new Prefix.
      description: Add a new Prefix to the database.
      parameters:
        - name: prefix
          in: body
          description: The Prefix to create.
          schema:
            $ref: "#/definitions/Prefix"
      responses:
        204:
          description: Prefix created succesfully.
        400:
          description: Prefix could not be created.
        500:
          $ref: "#/responses/Standard500ErrorResponse"
    put:
      summary: Updates existing Prefix.
      description: Updates an existing Prefix in the database.
      parameters:
        - name: prefix
          in: body
          description: The Prefix to update.
          schema:
            $ref: "#/definitions/Prefix"
      responses:
        204:
          description: Prefix updated succesfully.
        400:
          description: Prefix could not be updated.
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /prefix/{subnet}/{prefixlen}:
    parameters:
      - $ref: "#/parameters/subnet"
      - $ref: "#/parameters/prefixlen"
    get:
      summary: Get information about an Prefix
      description: Returns a single Prefix
      responses:
        200:
          description: an Prefix
          schema:
            $ref: "#/definitions/Prefix"
        404:
          $ref: "#/responses/PrefixDoesNotExistResponse"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
    delete:
      summary: Deletes an Prefix
      description: Delete a single Prefix identified by its prefix
      responses:
        204:
          description: Prefix deleted succesfully
        404:
          $ref: "#/responses/PrefixDoesNotExistResponse"
        500:
          $ref: "#/responses/Standard500ErrorResponse"

definitions:
  ErrorPointer:
    type: object
    properties:
      pointer:
        type: string
        minLength: 1
        maxLength: 128
  Error:
    type: object
    properties:
      detail:
        type: string
        minLength: 1
        maxLength: 512
      status:
        type: string
        pattern: "^[2345][0-9]{2}$"
        minLength: 3
        maxLength: 3
      source:
        $ref: "#/definitions/ErrorPointer"
  Errors:
    type: array
    minItems: 10
    maxItems: 100
    uniqueItems: true
    items:
      $ref: "#/definitions/Error"
  Owner:
    type: object
    required:
      - username
    properties:
      id:
        type: integer
      username:
        type: string
        pattern: "[a-z0-9]{3,32}"
        minLength: 3
        maxLength: 32
      password:
        type: string
        minLength: 8
        maxLength: 128
      salt:
        type: string
        minLength: 8
        maxLength: 512
      fullname:
        type: string
        pattern: "[a-zA-Z0-9\ -]{3,64}"
        minLength: 3
        maxLength: 64
      email:
        type: string
        pattern: ^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$
        minLength: 5
        maxLength: 64
      sessionToken:
        type: string
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        minLength: 36
        maxLength: 36
      apiToken:
        type: string
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        minLength: 36
        maxLength: 36
      isActive:
        type: boolean
      isAdmin:
        type: boolean
      signupTime:
        type: string
        format: dateTime
      activationTime:
        type: string
        format: dateTime
      lastLogin:
        type: string
        format: dateTime
      lastLoginHost:
        type: string
        pattern: "[0-9a-f.:]{7,39}"
        minLength: 7
        maxLength: 39
  Owners:
    type: array
    minItems: 10
    maxItems: 100
    uniqueItems: true
    items:
      $ref: "#/definitions/Owner"
  Activation:
    type: object
    required:
      - token
      - username
    properties:
      id:
        type: integer
      token:
        type: string
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        minLength: 36
        maxLength: 36
      username:
        type: string
        pattern: "[a-z0-9]{3,32}"
        minLength: 3
        maxLength: 32
      generationTime:
        type: string
        format: dateTime
  ActivationRestData:
    type: object
    properties:
      activate:
        $ref: "#/definitions/Activation"
      errors:
        $ref: "#/definitions/Errors"
  Activations:
    type: array
    minItems: 10
    maxItems: 100
    uniqueItems: true
    items:
      $ref: "#/definitions/Activation"
  Asnum:
    type: object
    required:
      - asnum
      - description
      - username
    properties:
      id:
        type: integer
      asnum:
        type: integer
        minimum: 64512
        maximum: 65535
      description:
        type: string
        pattern: "[a-zA-Z0-9-_\ ]{3,64}"
        minLength: 3
        maxLength: 64
      username:
        type: string
        pattern: "[a-z0-9]{3,32}"
        minLength: 3
        maxLength: 32
  Asnums:
    type: array
    minItems: 10
    maxItems: 100
    uniqueItems: true
    items:
      $ref: "#/definitions/Asnum"
  Prefix:
    type: object
    required:
      - network
      - description
      - username
    properties:
      id:
        type: integer
      network:
        type: string
        pattern: "[0-9a-f.:]{7,39}/[0-9]{1,3}"
        minLength: 9
        maxLength: 43
      description:
        type: string
        pattern: "[a-zA-Z0-9-_\ ]{3,64}"
        minLength: 3
        maxLength: 64
      username:
        type: string
        pattern: "[a-z0-9]{3,32}"
        minLength: 3
        maxLength: 32
      parent:
        type: string
        pattern: "[0-9a-f.:]{7,39}/[0-9]{1,3}"
        minLength: 9
        maxLength: 43
  Prefixes:
    type: array
    minItems: 10
    maxItems: 100
    uniqueItems: true
    items:
      $ref: "#/definitions/Prefix"
  SessionToken:
    type: string
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
    minLength: 36
    maxLength: 36
  Asset:
    type: string
    format: binary
  SignupRestData:
    type: object
    properties:
      signup:
        $ref: "#/definitions/Owner"
      errors:
        $ref: "#/definitions/Errors"

responses:
  Standard500ErrorResponse:
    description: An unexpected error occurred.
    schema:
      $ref: "#/definitions/Error"
  NoOwnersFoundResponse:
    description: No Owners found.
  OwnerDoesNotExistResponse:
    description: Owner does not exist.
  NoAsnumsFoundResponse:
    description: No Asnums found.
  AsnumDoesNotExistResponse:
    description: Asnum does not exist.
  NoPrefixesFoundResponse:
    description: No Prefixes found.
  PrefixDoesNotExistResponse:
    description: Prefix does not exist.

parameters:
  username:
    name: username
    in: path
    required: true
    description: The username of a Owner.
    type: string
    pattern: "[a-z0-9]{3,32}"
    minLength: 3
    maxLength: 32
  asnum:
    name: asnum
    in: path
    required: true
    description: The Asnum to get details for.
    type: integer
    minimum: 64512
    maximum: 65535
  subnet:
    name: subnet
    in: path
    required: true
    type: string
    pattern: "[0-9a-f.:]{7,39}"
    minLength: 7
    maxLength: 39
  prefixlen:
    name: prefixlen
    in: path
    required: true
    type: integer
    format: int32
    minimum: 0
    maximum: 128
  token:
    name: token
    in: path
    required: true
    type: string
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
    minLength: 36
    maxLength: 36
  queryToken:
    name: token
    in: query
    required: true
    type: string
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
    minLength: 36
    maxLength: 36
  fileName:
    name: fileName
    in: path
    required: true
    type: string
    pattern: "^[a-zA-Z0-9-_]+.[a-zA-Z0-9-_]+$"
    minLength: 3
    maxLength: 128
  pageSize:
    name: pageSize
    in: query
    description: Number of items to return
    type: integer
    format: int32
    minimum: 0
    exclusiveMinimum: true
    maximum: 100
    exclusiveMaximum: false
    multipleOf: 10
  pageNumber:
    name: pageNumber
    in: query
    description: Page number
    type: integer

securityDefinitions:
  UserSecurity:
    type: apiKey
    in: header
    name: X-User-Token
  AdminSecurity:
    type: apiKey
    in: header
    name: X-Admin-Token
  MediaSecurity:
    type: apiKey
    in: query
    name: media-token

security:
  - UserSecurity: []

